---
import RunDetails from "./../components/RunDetails.astro";
const allPosts = await Astro.glob("./../pages/runs/**/*.md");

allPosts.sort((a, b) => {
  // to make sure that latest filename shows up first
  const [, , yearA, runNumberA] = a.url.split("/");
  const [, , yearB, runNumberB] = b.url.split("/");

  return (
    parseInt(`${yearB}${runNumberB.padStart(3, "0")}`) -
    parseInt(`${yearA}${runNumberA.padStart(3, "0")}`)
  );
});

let mileages = {};
allPosts.forEach((post) => {
  const date = new Date(post.frontmatter.date);
  const options = { year: "numeric", month: "long" };
  const objectKey = new Intl.DateTimeFormat("en-US", options).format(date);
  if (!mileages.hasOwnProperty(objectKey)) {
    mileages[objectKey] = [];
  }
  mileages[objectKey].push(post.frontmatter.distanceCovered);
});

const mileageToArray = Object.entries(mileages).map((mileage) => {
  const [period, mileageArray] = mileage;

  const totalMileage = mileageArray.reduce(
    (accumulator, currentValue) =>
      parseFloat(accumulator, 10) + parseFloat(currentValue, 10),
    0
  );

  return [period, totalMileage.toFixed(2)];
});

const periodsToShow = 6; //show last 6 periods/months
---

<div class="tw-my-4">
  <h2 class="tw-font-black tw-text-xl">Monthly Mileage - Last 6 Months</h2>
  <div class="tw-grid tw-gap-1">
    {
      mileageToArray.slice(0, periodsToShow).map((mileage) => (
        <>
          <p>
            <b class="tw-font-bold">{mileage[1]}</b> km - {mileage[0]}
          </p>
        </>
      ))
    }
  </div>

  <div class="tw-mt-1">
    <a href="/mileage">See all monthly mileages</a>
  </div>
</div>
